# template:Rakefile {{{1
snippet template:Rakefile
alias   rake
	require 'rake/testtask'

	task default: :test

	Rake::TestTask.new(:test) do |t|
		t.libs << 'test'
		t.libs << 'src'
		t.test_files = FileList['test/**/*_test.rb']
	end

	task :${0:other} do |t|
	end

# rake:task {{{1
snippet rake:task
alias   task
	task :${0:other} do |t|
	end


# template:minitest:spec {{{1
snippet template:minitest:spec
alias   minitest:spec spec
	require 'test_helper'

	describe ${1:ClassName} do
		before do
		end

		describe '${2:function_name}' do
			it '${3:spec}' do
				${0}
				${1:actual}.must_equal ${2:expected}
			end
		end
	end

# spec:must_equal {{{1
snippet spec:must_equal
alias   must_equal
	${1:actual}.must_equal ${2:expected}

# spec:must_be_nil {{{1
snippet spec:must_be_nil
alias   must_be_nil
	${1:actual}.must_be_nil

# spec:let {{{1
snippet spec:let
alias   let
	let(:${1:var}) { ${0:value} }

# spec:context {{{1
snippet spec:context
alias   context
	context '${1:case}' do
		${0}
	end

# spec:subject {{{1
snippet spec:subject
alias   subject
	subject { ${1:subject} }


# template:minitest:unit {{{1
snippet template:minitest:unit
alias   minitest:unit unit
	require 'test_helper'

	class ${1:ClassName}Test < ActiveSupport::TestCase
		test '${2:description}' do
			${0}
			assert_equal ${3:expected}, ${4:actual}
		end
	end

# unit:assert_equal {{{1
snippet unit:assert_equal
alias   assert_equal
	assert_equal ${1:expected}, ${2:actual}

# unit:assert_true {{{1
snippet unit:assert_true
alias   assert_true
	assert ${1:true}

# unit:refute_nil {{{1
snippet unit:refute_nil
abbr    not nil
	refute_nil ${0}


# template:Ruboty:Handler {{{1
snippet template:Ruboty:Handler
alias   ruboty
	class ${1:class_name} < Base
		on(
			/${2:regexp}/i,
			name: '${3:function_name}',
			description: '${4:description}'
		)

		def $3(msg)
			${0}
			msg.reply('')
		end
	end


# template:Ruboty:test_helper {{{1
snippet template:Ruboty:test_helper
alias   test_helper
	require 'simplecov'
	SimpleCov.start do
		add_filter '/test/'
	end

	require 'minitest/autorun'
	require 'minitest/reporters'
	require 'mocha/minitest'
	# require 'factory_bot'

	require 'ruboty'

	require 'ruboty/${1:app_name}'
	# Dir[File.expand_path('factories', __dir__) << '/*.rb'].each { |file| require file }

	Minitest::Reporters.use! Minitest::Reporters::SpecReporter.new
	${0}

# mock:Mocha:expect {{{1
snippet mock:Mocha:expects:class_method
alias   expects:class_method
	${1:Class}.expects(:${2:class_method})${3:.once}
	${0}


# mock:Mocha:expects:instance_method {{{1
snippet mock:Mocha:expects:instance_method
alias   expects:instance_method
	${1:Class}.any_instance.expects(:${2:method})${3:.once}
	${0}


# mock:Mocha:stubs:instance_method {{{1
snippet mock:Mocha:stubs:instance_method
alias   stubs:instance_method
	${1:Class}.any_instance.stubs(:${2:method}).with(:${3:arg_condition}).returns(:${4:return_value})
	${0}


# mock:Mocha:let:new_mock {{{1
snippet mock:Mocha:let:new_mock
alias   let:mock
	let(${1:mock_name}) { mock.tap { |mock| mock.expects(:${2:method})${3:.once} } }
	${0}


# class:ActiveRecord {{{1
snippet class:ActiveRecord
	class ${1:ClassName} < ActiveRecord::Base
		belongs_to :${2:table_name}
	end

# template:ActiveRecord:migration {{{1
snippet template:ActiveRecord:migration
abbr    template for migration script
	class ${1:ClassName} < ActiveRecord::Migration[5.0]
		def change
			create_table :${2:table_name} do |t|
				t.${3:string} :${4:column_name}
				${0}
				t.timestamps
			end
			add_index :$2, :${5:column_name}
		end
	end

# rake:ActiveRecord:migration {{{1
snippet rake:ActiveRecord:migration
alias   db:migration
	namespace :db do
		task migrate: :env do
			ActiveRecord::Migrator.migrate('db/migrate', ENV['VERSION'] ? ENV['VERSION'].to_i : nil)
		end

		task :env do
			dbconfig = YAML.safe_load(File.read('db/database.yml'))
			ActiveRecord::Base.establish_connection(dbconfig[ENV['ENV']])
			ActiveRecord::Base.logger = Logger.new('log/database.log')
		end
	end
	${0}


# template:Gemfile {{{1
snippet template:Gemfile
alias   gem
	gem 'activerecord'
	gem 'activesupport'

	# development
	gem 'bundler'
	gem 'byebug'
	gem 'factory_bot'
	gem 'minitest'
	gem 'minitest-reporters'
	gem 'mocha'
	gem 'pry'
	gem 'pry-byebug'
	gem 'pry-theme'
	gem 'rake'
	${0}


# template:gemspec {{{1
snippet template:gemspec
alias   gemspec
	# spec.add_runtime_dependency 'activerecord'
	spec.add_runtime_dependency 'activesupport'
	spec.add_development_dependency 'bundler'
	spec.add_development_dependency 'codeclimate-test-reporter', '~> 1.0.0'
	# spec.add_development_dependency 'factory_bot'
	spec.add_development_dependency 'guard-bundler'
	spec.add_development_dependency 'guard-ctags-bundler'
	spec.add_development_dependency 'guard-minitest'
	spec.add_development_dependency 'minitest'
	spec.add_development_dependency 'minitest-reporters'
	spec.add_development_dependency 'mocha'
	spec.add_development_dependency 'pry-byebug'
	spec.add_development_dependency 'pry-theme'
	spec.add_development_dependency 'rake'
	spec.add_development_dependency 'rb-fsevent'
	spec.add_development_dependency 'simplecov'
	spec.add_development_dependency 'terminal-notifier-guard'
	${0}

# template:entry_point {{{1
snippet template:entry_point
alias   entry index
abbr    template for app entry point
	require 'active_support'
	require 'active_support/core_ext'
	${0}

	module ${2:module_name}
		# Main module
		module $1
			@logger = Logger.new($stdout)

			class << self
				attr_reader :logger
			end
		end
	end

	Dir[File.expand_path('${1:app_name}', __dir__) << '/**/*.rb'].each { |file| require file }

# require:cur_dir {{{1
snippet require:cur_dir
abbr    require ./**/*.rb
	# require ./${1:path}/**/*.rb
	Dir[File.expand_path('$1', __dir__) << '/**/*.rb'].each { |file| require file }
	${0}

# require:active_support {{{1
snippet require:active_support
	require 'active_support'
	require 'active_support/core_ext'


# pry {{{1
snippet pry
abbr    binding.pry
alias   byebug binding
	require 'pry'; binding.pry${0}


# debug {{{1
snippet debug
abbr    def debug
	def debug(str = '')
		str = ' ' + str if !str.empty?
		puts "#{Time.now.to_s} [DEBUG] #{__FILE__} L#{__LINE__}#{str}" if $DEBUG
	end
	${0}

# begin {{{1
snippet begin
alias   try catch
abbr    begin ... rescue ... ensure ... end
	begin
		${0}
	rescue => e
	ensure
	end

# def:rescue {{{1
snippet def:rescue
abbr    def ... rescue ... ensure ... end
	def ${1:func_name}
		${0}
	rescue => e
	ensure
	end

# switch {{{1
snippet switch
alias   case
abbr    case ... when ... else ... end
	case ${1:object}
	when ${2:condition}
		${0}
	else
	end

