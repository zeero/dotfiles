snippet command:unite
abbr    add Unite command
  command! ${1:cmd_name} :Unite ${2:unite_source}
  \ -no-empty -silent -buffer-name=$2${0}

snippet lazy:insert
  NeoBundleLazy '${1:bundle}'
  \, {'autoload': {'insert': 1}}

snippet lazy:commands
  NeoBundleLazy '${1:bundle}'
  \, {'autoload': {'commands': ['${2:Command}'${0}]}}

snippet lazy:filetypes
  NeoBundleLazy '${1:bundle}'
  \, {'autoload': {'filetypes': ['${2:filetype}'${0}]}}

snippet lazy:unite
  NeoBundleLazy '${1:bundle}'
  \, {'autoload': {'unite_sources': ['${2:source}'${0}]}}

snippet lazy:mappings
  NeoBundleLazy '${1:bundle}'
  \, {'autoload': {'mappings': ['${2:mapping}'${0}]}}

snippet function
abbr    my function (override default snippet)
alias   func
options head
  function! ${1:#:func_name}(${2}) "{{{
    ${0}
  endfunction "}}}

snippet <C-r><C-w>
  <C-r><C-w>

snippet <C-r>"
  <C-r>"

snippet vim:plugin
abbr    plugin template
  " vim-${1:plugin_name} - ${2:Description}
  " Version: 0.0.1
  " Author : zeero <zeero26@gmail.com>

  if exists('g:loaded_$1')
    finish
  endif
  let g:loaded_$1 = 1

  let s:save_cpo = &cpo
  set cpo&vim

  " Keymaps
  " Commands
  " Variables
  ${0}

  let &cpo = s:save_cpo
  unlet s:save_cpo

snippet vim:option:default
abbr    set option default value
  if !exists('g:${1}')
    let g:$1 = '${2}'
  endif
  ${0}

